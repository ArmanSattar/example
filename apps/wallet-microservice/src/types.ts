import { UUID } from 'crypto';
import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Selectable,
  Updateable,
} from 'kysely';

enum Currency {
  SOL = 'SOL',
  BTC = 'BTC',
  ETH = 'ETH',
}

type Wallet = {
  currency: Currency;
  balance: number;
  wagerRequirement: number;
  address: string;
  lockedAt: string;
};

type User = {
  user_id: string;
  wallets: Wallet[];
};

type UserAndWallet = {
  user: User;
  wallet: Wallet;
};

type Transaction = {
  transaction_id: string;
  userId: string;
  amount: number;
  type: TransactionPurpose; // Deposit/Withdraw
  timestamp: string;
  currency: Currency;
};

export type BalanceAndWagerRequirement = {
  balance: number;
  wagerRequirement: number;
};

enum TransactionPurpose {
  Deposit = 'Deposit',
  Withdraw = 'Withdraw',
}

type DepositTransactionResponse = {
  message: string;
  depositAmount: number;
  transactionId: string;
};

export type WalletState = 'ACTIVE' | 'LOCKED' | 'TERMINATED';

export type Wallets = {
  wallet_id: string;
  user_id: string;
  currency: Currency;
  balance: number;
  wager_requirement: number;
  address: string | null;
  state: WalletState;
  created_at: string;
};

export interface Database {
  wallets: Wallets;
}

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface WalletsTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  wallet_id: ColumnType<string, string, never>;

  user_id: ColumnType<string, string, never>;
  currency: ColumnType<Currency, Currency, never>;

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  balance: ColumnType<number, number>;

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  wager_requirement: ColumnType<number, number>;

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  address: ColumnType<string | null, string | null>;
  state: WalletState;
  created_at: ColumnType<string, string, never>;
}

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type WalletSelect = Selectable<WalletsTable>;
export type WalletInsert = Insertable<WalletsTable>;
export type WalletUpdate = Updateable<WalletsTable>;

export {
  Currency,
  Wallet,
  User,
  UserAndWallet,
  Transaction,
  TransactionPurpose,
  DepositTransactionResponse,
};
